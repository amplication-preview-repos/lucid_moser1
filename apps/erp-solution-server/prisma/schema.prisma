datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Students {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  firstName          String?
  lastName           String?
  phoneNumber        String?
  address            String?
  dateOfBirth        DateTime?
  email              String?
  enrollmentNumber   String?
  rollNumber         String?
  registrationNumber String?
}

model Parents {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  firstName   String?
  lastName    String?
  email       String?
  phoneNumber String?
  address     String?
}

model LibraryResources {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          String?
  isbn            String?
  publishedDate   DateTime?
  title           String?
  availableCopies Int?
}

model Courses {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  courseName       String?
  courseCode       String?
  description      String?
  credits          Int?
  faculty          Faculty?      @relation(fields: [facultyId], references: [id])
  facultyId        String?
  assignmentsItems Assignments[]
  examsItems       Exams[]
}

model Meetings {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  description  String?
  dateTime     DateTime?
  participants String?
  title        String?
}

model Notifications {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  timestamp DateTime?
  message   String?
  recipient String?
}

model FinancialInformation {
  id            String                                 @id @default(cuid())
  createdAt     DateTime                               @default(now())
  updatedAt     DateTime                               @updatedAt
  hostelFee     Float?
  paymentStatus EnumFinancialInformationPaymentStatus?
  paymentDate   DateTime?
  tuitionFee    Float?
}

model Faculty {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  firstName    String?
  lastName     String?
  email        String?
  phoneNumber  String?
  officeHours  String?
  department   String?
  coursesItems Courses[]
  role         String?
}

model Assignments {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueDate     DateTime?
  title       String?
  description String?
  course      Courses?  @relation(fields: [courseId], references: [id])
  courseId    String?
}

model ForumPosts {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String?
  content   String?
  author    String?
  timestamp DateTime?
}

model Messages {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  receiver    String?
  messageBody String?
  timestamp   DateTime?
  sender      String?
}

model Exams {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String?
  date        DateTime?
  title       String?
  course      Courses?  @relation(fields: [courseId], references: [id])
  courseId    String?
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String?
  lastName  String?
  username  String   @unique
  email     String?  @unique
  password  String
  roles     Json
}

enum EnumFinancialInformationPaymentStatus {
  Option1
}
