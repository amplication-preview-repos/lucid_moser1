/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NotificationsService } from "../notifications.service";
import { NotificationsCreateInput } from "./NotificationsCreateInput";
import { Notifications } from "./Notifications";
import { NotificationsFindManyArgs } from "./NotificationsFindManyArgs";
import { NotificationsWhereUniqueInput } from "./NotificationsWhereUniqueInput";
import { NotificationsUpdateInput } from "./NotificationsUpdateInput";

export class NotificationsControllerBase {
  constructor(protected readonly service: NotificationsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Notifications })
  async createNotifications(
    @common.Body() data: NotificationsCreateInput
  ): Promise<Notifications> {
    return await this.service.createNotifications({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        message: true,
        recipient: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Notifications] })
  @ApiNestedQuery(NotificationsFindManyArgs)
  async notificationsItems(
    @common.Req() request: Request
  ): Promise<Notifications[]> {
    const args = plainToClass(NotificationsFindManyArgs, request.query);
    return this.service.notificationsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        message: true,
        recipient: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Notifications })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async notifications(
    @common.Param() params: NotificationsWhereUniqueInput
  ): Promise<Notifications | null> {
    const result = await this.service.notifications({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        message: true,
        recipient: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Notifications })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNotifications(
    @common.Param() params: NotificationsWhereUniqueInput,
    @common.Body() data: NotificationsUpdateInput
  ): Promise<Notifications | null> {
    try {
      return await this.service.updateNotifications({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,
          message: true,
          recipient: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Notifications })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNotifications(
    @common.Param() params: NotificationsWhereUniqueInput
  ): Promise<Notifications | null> {
    try {
      return await this.service.deleteNotifications({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,
          message: true,
          recipient: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
