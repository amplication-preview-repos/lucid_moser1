/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Parents } from "./Parents";
import { ParentsCountArgs } from "./ParentsCountArgs";
import { ParentsFindManyArgs } from "./ParentsFindManyArgs";
import { ParentsFindUniqueArgs } from "./ParentsFindUniqueArgs";
import { CreateParentsArgs } from "./CreateParentsArgs";
import { UpdateParentsArgs } from "./UpdateParentsArgs";
import { DeleteParentsArgs } from "./DeleteParentsArgs";
import { ParentsService } from "../parents.service";
@graphql.Resolver(() => Parents)
export class ParentsResolverBase {
  constructor(protected readonly service: ParentsService) {}

  async _parentsItemsMeta(
    @graphql.Args() args: ParentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Parents])
  async parentsItems(
    @graphql.Args() args: ParentsFindManyArgs
  ): Promise<Parents[]> {
    return this.service.parentsItems(args);
  }

  @graphql.Query(() => Parents, { nullable: true })
  async parents(
    @graphql.Args() args: ParentsFindUniqueArgs
  ): Promise<Parents | null> {
    const result = await this.service.parents(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Parents)
  async createParents(
    @graphql.Args() args: CreateParentsArgs
  ): Promise<Parents> {
    return await this.service.createParents({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Parents)
  async updateParents(
    @graphql.Args() args: UpdateParentsArgs
  ): Promise<Parents | null> {
    try {
      return await this.service.updateParents({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Parents)
  async deleteParents(
    @graphql.Args() args: DeleteParentsArgs
  ): Promise<Parents | null> {
    try {
      return await this.service.deleteParents(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
