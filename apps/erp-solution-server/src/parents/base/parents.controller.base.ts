/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ParentsService } from "../parents.service";
import { ParentsCreateInput } from "./ParentsCreateInput";
import { Parents } from "./Parents";
import { ParentsFindManyArgs } from "./ParentsFindManyArgs";
import { ParentsWhereUniqueInput } from "./ParentsWhereUniqueInput";
import { ParentsUpdateInput } from "./ParentsUpdateInput";

export class ParentsControllerBase {
  constructor(protected readonly service: ParentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Parents })
  async createParents(
    @common.Body() data: ParentsCreateInput
  ): Promise<Parents> {
    return await this.service.createParents({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        email: true,
        phoneNumber: true,
        address: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Parents] })
  @ApiNestedQuery(ParentsFindManyArgs)
  async parentsItems(@common.Req() request: Request): Promise<Parents[]> {
    const args = plainToClass(ParentsFindManyArgs, request.query);
    return this.service.parentsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        email: true,
        phoneNumber: true,
        address: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Parents })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async parents(
    @common.Param() params: ParentsWhereUniqueInput
  ): Promise<Parents | null> {
    const result = await this.service.parents({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        email: true,
        phoneNumber: true,
        address: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Parents })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateParents(
    @common.Param() params: ParentsWhereUniqueInput,
    @common.Body() data: ParentsUpdateInput
  ): Promise<Parents | null> {
    try {
      return await this.service.updateParents({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          email: true,
          phoneNumber: true,
          address: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Parents })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteParents(
    @common.Param() params: ParentsWhereUniqueInput
  ): Promise<Parents | null> {
    try {
      return await this.service.deleteParents({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          email: true,
          phoneNumber: true,
          address: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
