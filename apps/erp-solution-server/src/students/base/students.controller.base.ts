/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentsService } from "../students.service";
import { StudentsCreateInput } from "./StudentsCreateInput";
import { Students } from "./Students";
import { StudentsFindManyArgs } from "./StudentsFindManyArgs";
import { StudentsWhereUniqueInput } from "./StudentsWhereUniqueInput";
import { StudentsUpdateInput } from "./StudentsUpdateInput";

export class StudentsControllerBase {
  constructor(protected readonly service: StudentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Students })
  async createStudents(
    @common.Body() data: StudentsCreateInput
  ): Promise<Students> {
    return await this.service.createStudents({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        phoneNumber: true,
        address: true,
        dateOfBirth: true,
        email: true,
        enrollmentNumber: true,
        rollNumber: true,
        registrationNumber: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Students] })
  @ApiNestedQuery(StudentsFindManyArgs)
  async studentsItems(@common.Req() request: Request): Promise<Students[]> {
    const args = plainToClass(StudentsFindManyArgs, request.query);
    return this.service.studentsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        phoneNumber: true,
        address: true,
        dateOfBirth: true,
        email: true,
        enrollmentNumber: true,
        rollNumber: true,
        registrationNumber: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Students })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async students(
    @common.Param() params: StudentsWhereUniqueInput
  ): Promise<Students | null> {
    const result = await this.service.students({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        phoneNumber: true,
        address: true,
        dateOfBirth: true,
        email: true,
        enrollmentNumber: true,
        rollNumber: true,
        registrationNumber: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Students })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudents(
    @common.Param() params: StudentsWhereUniqueInput,
    @common.Body() data: StudentsUpdateInput
  ): Promise<Students | null> {
    try {
      return await this.service.updateStudents({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          phoneNumber: true,
          address: true,
          dateOfBirth: true,
          email: true,
          enrollmentNumber: true,
          rollNumber: true,
          registrationNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Students })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudents(
    @common.Param() params: StudentsWhereUniqueInput
  ): Promise<Students | null> {
    try {
      return await this.service.deleteStudents({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          phoneNumber: true,
          address: true,
          dateOfBirth: true,
          email: true,
          enrollmentNumber: true,
          rollNumber: true,
          registrationNumber: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
