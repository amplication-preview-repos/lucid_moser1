/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Students } from "./Students";
import { StudentsCountArgs } from "./StudentsCountArgs";
import { StudentsFindManyArgs } from "./StudentsFindManyArgs";
import { StudentsFindUniqueArgs } from "./StudentsFindUniqueArgs";
import { CreateStudentsArgs } from "./CreateStudentsArgs";
import { UpdateStudentsArgs } from "./UpdateStudentsArgs";
import { DeleteStudentsArgs } from "./DeleteStudentsArgs";
import { StudentsService } from "../students.service";
@graphql.Resolver(() => Students)
export class StudentsResolverBase {
  constructor(protected readonly service: StudentsService) {}

  async _studentsItemsMeta(
    @graphql.Args() args: StudentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Students])
  async studentsItems(
    @graphql.Args() args: StudentsFindManyArgs
  ): Promise<Students[]> {
    return this.service.studentsItems(args);
  }

  @graphql.Query(() => Students, { nullable: true })
  async students(
    @graphql.Args() args: StudentsFindUniqueArgs
  ): Promise<Students | null> {
    const result = await this.service.students(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Students)
  async createStudents(
    @graphql.Args() args: CreateStudentsArgs
  ): Promise<Students> {
    return await this.service.createStudents({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Students)
  async updateStudents(
    @graphql.Args() args: UpdateStudentsArgs
  ): Promise<Students | null> {
    try {
      return await this.service.updateStudents({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Students)
  async deleteStudents(
    @graphql.Args() args: DeleteStudentsArgs
  ): Promise<Students | null> {
    try {
      return await this.service.deleteStudents(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
