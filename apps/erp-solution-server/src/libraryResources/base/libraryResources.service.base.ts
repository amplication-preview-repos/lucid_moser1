/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LibraryResources as PrismaLibraryResources,
} from "@prisma/client";

export class LibraryResourcesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LibraryResourcesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.libraryResources.count(args);
  }

  async libraryResourcesItems(
    args: Prisma.LibraryResourcesFindManyArgs
  ): Promise<PrismaLibraryResources[]> {
    return this.prisma.libraryResources.findMany(args);
  }
  async libraryResources(
    args: Prisma.LibraryResourcesFindUniqueArgs
  ): Promise<PrismaLibraryResources | null> {
    return this.prisma.libraryResources.findUnique(args);
  }
  async createLibraryResources(
    args: Prisma.LibraryResourcesCreateArgs
  ): Promise<PrismaLibraryResources> {
    return this.prisma.libraryResources.create(args);
  }
  async updateLibraryResources(
    args: Prisma.LibraryResourcesUpdateArgs
  ): Promise<PrismaLibraryResources> {
    return this.prisma.libraryResources.update(args);
  }
  async deleteLibraryResources(
    args: Prisma.LibraryResourcesDeleteArgs
  ): Promise<PrismaLibraryResources> {
    return this.prisma.libraryResources.delete(args);
  }
}
