/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LibraryResourcesService } from "../libraryResources.service";
import { LibraryResourcesCreateInput } from "./LibraryResourcesCreateInput";
import { LibraryResources } from "./LibraryResources";
import { LibraryResourcesFindManyArgs } from "./LibraryResourcesFindManyArgs";
import { LibraryResourcesWhereUniqueInput } from "./LibraryResourcesWhereUniqueInput";
import { LibraryResourcesUpdateInput } from "./LibraryResourcesUpdateInput";

export class LibraryResourcesControllerBase {
  constructor(protected readonly service: LibraryResourcesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LibraryResources })
  async createLibraryResources(
    @common.Body() data: LibraryResourcesCreateInput
  ): Promise<LibraryResources> {
    return await this.service.createLibraryResources({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        author: true,
        isbn: true,
        publishedDate: true,
        title: true,
        availableCopies: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LibraryResources] })
  @ApiNestedQuery(LibraryResourcesFindManyArgs)
  async libraryResourcesItems(
    @common.Req() request: Request
  ): Promise<LibraryResources[]> {
    const args = plainToClass(LibraryResourcesFindManyArgs, request.query);
    return this.service.libraryResourcesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        author: true,
        isbn: true,
        publishedDate: true,
        title: true,
        availableCopies: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LibraryResources })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async libraryResources(
    @common.Param() params: LibraryResourcesWhereUniqueInput
  ): Promise<LibraryResources | null> {
    const result = await this.service.libraryResources({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        author: true,
        isbn: true,
        publishedDate: true,
        title: true,
        availableCopies: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LibraryResources })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLibraryResources(
    @common.Param() params: LibraryResourcesWhereUniqueInput,
    @common.Body() data: LibraryResourcesUpdateInput
  ): Promise<LibraryResources | null> {
    try {
      return await this.service.updateLibraryResources({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          author: true,
          isbn: true,
          publishedDate: true,
          title: true,
          availableCopies: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LibraryResources })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLibraryResources(
    @common.Param() params: LibraryResourcesWhereUniqueInput
  ): Promise<LibraryResources | null> {
    try {
      return await this.service.deleteLibraryResources({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          author: true,
          isbn: true,
          publishedDate: true,
          title: true,
          availableCopies: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
