/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LibraryResources } from "./LibraryResources";
import { LibraryResourcesCountArgs } from "./LibraryResourcesCountArgs";
import { LibraryResourcesFindManyArgs } from "./LibraryResourcesFindManyArgs";
import { LibraryResourcesFindUniqueArgs } from "./LibraryResourcesFindUniqueArgs";
import { CreateLibraryResourcesArgs } from "./CreateLibraryResourcesArgs";
import { UpdateLibraryResourcesArgs } from "./UpdateLibraryResourcesArgs";
import { DeleteLibraryResourcesArgs } from "./DeleteLibraryResourcesArgs";
import { LibraryResourcesService } from "../libraryResources.service";
@graphql.Resolver(() => LibraryResources)
export class LibraryResourcesResolverBase {
  constructor(protected readonly service: LibraryResourcesService) {}

  async _libraryResourcesItemsMeta(
    @graphql.Args() args: LibraryResourcesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LibraryResources])
  async libraryResourcesItems(
    @graphql.Args() args: LibraryResourcesFindManyArgs
  ): Promise<LibraryResources[]> {
    return this.service.libraryResourcesItems(args);
  }

  @graphql.Query(() => LibraryResources, { nullable: true })
  async libraryResources(
    @graphql.Args() args: LibraryResourcesFindUniqueArgs
  ): Promise<LibraryResources | null> {
    const result = await this.service.libraryResources(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LibraryResources)
  async createLibraryResources(
    @graphql.Args() args: CreateLibraryResourcesArgs
  ): Promise<LibraryResources> {
    return await this.service.createLibraryResources({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LibraryResources)
  async updateLibraryResources(
    @graphql.Args() args: UpdateLibraryResourcesArgs
  ): Promise<LibraryResources | null> {
    try {
      return await this.service.updateLibraryResources({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LibraryResources)
  async deleteLibraryResources(
    @graphql.Args() args: DeleteLibraryResourcesArgs
  ): Promise<LibraryResources | null> {
    try {
      return await this.service.deleteLibraryResources(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
