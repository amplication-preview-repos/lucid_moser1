/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Assignments } from "./Assignments";
import { AssignmentsCountArgs } from "./AssignmentsCountArgs";
import { AssignmentsFindManyArgs } from "./AssignmentsFindManyArgs";
import { AssignmentsFindUniqueArgs } from "./AssignmentsFindUniqueArgs";
import { CreateAssignmentsArgs } from "./CreateAssignmentsArgs";
import { UpdateAssignmentsArgs } from "./UpdateAssignmentsArgs";
import { DeleteAssignmentsArgs } from "./DeleteAssignmentsArgs";
import { Courses } from "../../courses/base/Courses";
import { AssignmentsService } from "../assignments.service";
@graphql.Resolver(() => Assignments)
export class AssignmentsResolverBase {
  constructor(protected readonly service: AssignmentsService) {}

  async _assignmentsItemsMeta(
    @graphql.Args() args: AssignmentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Assignments])
  async assignmentsItems(
    @graphql.Args() args: AssignmentsFindManyArgs
  ): Promise<Assignments[]> {
    return this.service.assignmentsItems(args);
  }

  @graphql.Query(() => Assignments, { nullable: true })
  async assignments(
    @graphql.Args() args: AssignmentsFindUniqueArgs
  ): Promise<Assignments | null> {
    const result = await this.service.assignments(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Assignments)
  async createAssignments(
    @graphql.Args() args: CreateAssignmentsArgs
  ): Promise<Assignments> {
    return await this.service.createAssignments({
      ...args,
      data: {
        ...args.data,

        course: args.data.course
          ? {
              connect: args.data.course,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Assignments)
  async updateAssignments(
    @graphql.Args() args: UpdateAssignmentsArgs
  ): Promise<Assignments | null> {
    try {
      return await this.service.updateAssignments({
        ...args,
        data: {
          ...args.data,

          course: args.data.course
            ? {
                connect: args.data.course,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Assignments)
  async deleteAssignments(
    @graphql.Args() args: DeleteAssignmentsArgs
  ): Promise<Assignments | null> {
    try {
      return await this.service.deleteAssignments(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Courses, {
    nullable: true,
    name: "course",
  })
  async getCourse(
    @graphql.Parent() parent: Assignments
  ): Promise<Courses | null> {
    const result = await this.service.getCourse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
