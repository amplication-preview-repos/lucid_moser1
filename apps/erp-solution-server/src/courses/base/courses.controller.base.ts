/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CoursesService } from "../courses.service";
import { CoursesCreateInput } from "./CoursesCreateInput";
import { Courses } from "./Courses";
import { CoursesFindManyArgs } from "./CoursesFindManyArgs";
import { CoursesWhereUniqueInput } from "./CoursesWhereUniqueInput";
import { CoursesUpdateInput } from "./CoursesUpdateInput";
import { AssignmentsFindManyArgs } from "../../assignments/base/AssignmentsFindManyArgs";
import { Assignments } from "../../assignments/base/Assignments";
import { AssignmentsWhereUniqueInput } from "../../assignments/base/AssignmentsWhereUniqueInput";
import { ExamsFindManyArgs } from "../../exams/base/ExamsFindManyArgs";
import { Exams } from "../../exams/base/Exams";
import { ExamsWhereUniqueInput } from "../../exams/base/ExamsWhereUniqueInput";

export class CoursesControllerBase {
  constructor(protected readonly service: CoursesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Courses })
  async createCourses(
    @common.Body() data: CoursesCreateInput
  ): Promise<Courses> {
    return await this.service.createCourses({
      data: {
        ...data,

        faculty: data.faculty
          ? {
              connect: data.faculty,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        courseName: true,
        courseCode: true,
        description: true,
        credits: true,

        faculty: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Courses] })
  @ApiNestedQuery(CoursesFindManyArgs)
  async coursesItems(@common.Req() request: Request): Promise<Courses[]> {
    const args = plainToClass(CoursesFindManyArgs, request.query);
    return this.service.coursesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        courseName: true,
        courseCode: true,
        description: true,
        credits: true,

        faculty: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Courses })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async courses(
    @common.Param() params: CoursesWhereUniqueInput
  ): Promise<Courses | null> {
    const result = await this.service.courses({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        courseName: true,
        courseCode: true,
        description: true,
        credits: true,

        faculty: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Courses })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCourses(
    @common.Param() params: CoursesWhereUniqueInput,
    @common.Body() data: CoursesUpdateInput
  ): Promise<Courses | null> {
    try {
      return await this.service.updateCourses({
        where: params,
        data: {
          ...data,

          faculty: data.faculty
            ? {
                connect: data.faculty,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          courseName: true,
          courseCode: true,
          description: true,
          credits: true,

          faculty: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Courses })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCourses(
    @common.Param() params: CoursesWhereUniqueInput
  ): Promise<Courses | null> {
    try {
      return await this.service.deleteCourses({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          courseName: true,
          courseCode: true,
          description: true,
          credits: true,

          faculty: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/assignmentsItems")
  @ApiNestedQuery(AssignmentsFindManyArgs)
  async findAssignmentsItems(
    @common.Req() request: Request,
    @common.Param() params: CoursesWhereUniqueInput
  ): Promise<Assignments[]> {
    const query = plainToClass(AssignmentsFindManyArgs, request.query);
    const results = await this.service.findAssignmentsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dueDate: true,
        title: true,
        description: true,

        course: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/assignmentsItems")
  async connectAssignmentsItems(
    @common.Param() params: CoursesWhereUniqueInput,
    @common.Body() body: AssignmentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assignmentsItems: {
        connect: body,
      },
    };
    await this.service.updateCourses({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/assignmentsItems")
  async updateAssignmentsItems(
    @common.Param() params: CoursesWhereUniqueInput,
    @common.Body() body: AssignmentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assignmentsItems: {
        set: body,
      },
    };
    await this.service.updateCourses({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/assignmentsItems")
  async disconnectAssignmentsItems(
    @common.Param() params: CoursesWhereUniqueInput,
    @common.Body() body: AssignmentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assignmentsItems: {
        disconnect: body,
      },
    };
    await this.service.updateCourses({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/examsItems")
  @ApiNestedQuery(ExamsFindManyArgs)
  async findExamsItems(
    @common.Req() request: Request,
    @common.Param() params: CoursesWhereUniqueInput
  ): Promise<Exams[]> {
    const query = plainToClass(ExamsFindManyArgs, request.query);
    const results = await this.service.findExamsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        date: true,
        title: true,

        course: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/examsItems")
  async connectExamsItems(
    @common.Param() params: CoursesWhereUniqueInput,
    @common.Body() body: ExamsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      examsItems: {
        connect: body,
      },
    };
    await this.service.updateCourses({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/examsItems")
  async updateExamsItems(
    @common.Param() params: CoursesWhereUniqueInput,
    @common.Body() body: ExamsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      examsItems: {
        set: body,
      },
    };
    await this.service.updateCourses({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/examsItems")
  async disconnectExamsItems(
    @common.Param() params: CoursesWhereUniqueInput,
    @common.Body() body: ExamsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      examsItems: {
        disconnect: body,
      },
    };
    await this.service.updateCourses({
      where: params,
      data,
      select: { id: true },
    });
  }
}
