/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Courses as PrismaCourses,
  Assignments as PrismaAssignments,
  Exams as PrismaExams,
  Faculty as PrismaFaculty,
} from "@prisma/client";

export class CoursesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CoursesCountArgs, "select">): Promise<number> {
    return this.prisma.courses.count(args);
  }

  async coursesItems(
    args: Prisma.CoursesFindManyArgs
  ): Promise<PrismaCourses[]> {
    return this.prisma.courses.findMany(args);
  }
  async courses(
    args: Prisma.CoursesFindUniqueArgs
  ): Promise<PrismaCourses | null> {
    return this.prisma.courses.findUnique(args);
  }
  async createCourses(args: Prisma.CoursesCreateArgs): Promise<PrismaCourses> {
    return this.prisma.courses.create(args);
  }
  async updateCourses(args: Prisma.CoursesUpdateArgs): Promise<PrismaCourses> {
    return this.prisma.courses.update(args);
  }
  async deleteCourses(args: Prisma.CoursesDeleteArgs): Promise<PrismaCourses> {
    return this.prisma.courses.delete(args);
  }

  async findAssignmentsItems(
    parentId: string,
    args: Prisma.AssignmentsFindManyArgs
  ): Promise<PrismaAssignments[]> {
    return this.prisma.courses
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .assignmentsItems(args);
  }

  async findExamsItems(
    parentId: string,
    args: Prisma.ExamsFindManyArgs
  ): Promise<PrismaExams[]> {
    return this.prisma.courses
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .examsItems(args);
  }

  async getFaculty(parentId: string): Promise<PrismaFaculty | null> {
    return this.prisma.courses
      .findUnique({
        where: { id: parentId },
      })
      .faculty();
  }
}
