/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ForumPosts } from "./ForumPosts";
import { ForumPostsCountArgs } from "./ForumPostsCountArgs";
import { ForumPostsFindManyArgs } from "./ForumPostsFindManyArgs";
import { ForumPostsFindUniqueArgs } from "./ForumPostsFindUniqueArgs";
import { CreateForumPostsArgs } from "./CreateForumPostsArgs";
import { UpdateForumPostsArgs } from "./UpdateForumPostsArgs";
import { DeleteForumPostsArgs } from "./DeleteForumPostsArgs";
import { ForumPostsService } from "../forumPosts.service";
@graphql.Resolver(() => ForumPosts)
export class ForumPostsResolverBase {
  constructor(protected readonly service: ForumPostsService) {}

  async _forumPostsItemsMeta(
    @graphql.Args() args: ForumPostsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ForumPosts])
  async forumPostsItems(
    @graphql.Args() args: ForumPostsFindManyArgs
  ): Promise<ForumPosts[]> {
    return this.service.forumPostsItems(args);
  }

  @graphql.Query(() => ForumPosts, { nullable: true })
  async forumPosts(
    @graphql.Args() args: ForumPostsFindUniqueArgs
  ): Promise<ForumPosts | null> {
    const result = await this.service.forumPosts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ForumPosts)
  async createForumPosts(
    @graphql.Args() args: CreateForumPostsArgs
  ): Promise<ForumPosts> {
    return await this.service.createForumPosts({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ForumPosts)
  async updateForumPosts(
    @graphql.Args() args: UpdateForumPostsArgs
  ): Promise<ForumPosts | null> {
    try {
      return await this.service.updateForumPosts({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ForumPosts)
  async deleteForumPosts(
    @graphql.Args() args: DeleteForumPostsArgs
  ): Promise<ForumPosts | null> {
    try {
      return await this.service.deleteForumPosts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
