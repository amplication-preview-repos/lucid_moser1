/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ForumPostsService } from "../forumPosts.service";
import { ForumPostsCreateInput } from "./ForumPostsCreateInput";
import { ForumPosts } from "./ForumPosts";
import { ForumPostsFindManyArgs } from "./ForumPostsFindManyArgs";
import { ForumPostsWhereUniqueInput } from "./ForumPostsWhereUniqueInput";
import { ForumPostsUpdateInput } from "./ForumPostsUpdateInput";

export class ForumPostsControllerBase {
  constructor(protected readonly service: ForumPostsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ForumPosts })
  async createForumPosts(
    @common.Body() data: ForumPostsCreateInput
  ): Promise<ForumPosts> {
    return await this.service.createForumPosts({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        author: true,
        timestamp: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ForumPosts] })
  @ApiNestedQuery(ForumPostsFindManyArgs)
  async forumPostsItems(@common.Req() request: Request): Promise<ForumPosts[]> {
    const args = plainToClass(ForumPostsFindManyArgs, request.query);
    return this.service.forumPostsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        author: true,
        timestamp: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ForumPosts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async forumPosts(
    @common.Param() params: ForumPostsWhereUniqueInput
  ): Promise<ForumPosts | null> {
    const result = await this.service.forumPosts({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        author: true,
        timestamp: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ForumPosts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateForumPosts(
    @common.Param() params: ForumPostsWhereUniqueInput,
    @common.Body() data: ForumPostsUpdateInput
  ): Promise<ForumPosts | null> {
    try {
      return await this.service.updateForumPosts({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,
          author: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ForumPosts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteForumPosts(
    @common.Param() params: ForumPostsWhereUniqueInput
  ): Promise<ForumPosts | null> {
    try {
      return await this.service.deleteForumPosts({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,
          author: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
