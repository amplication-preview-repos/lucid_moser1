/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MeetingsService } from "../meetings.service";
import { MeetingsCreateInput } from "./MeetingsCreateInput";
import { Meetings } from "./Meetings";
import { MeetingsFindManyArgs } from "./MeetingsFindManyArgs";
import { MeetingsWhereUniqueInput } from "./MeetingsWhereUniqueInput";
import { MeetingsUpdateInput } from "./MeetingsUpdateInput";

export class MeetingsControllerBase {
  constructor(protected readonly service: MeetingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Meetings })
  async createMeetings(
    @common.Body() data: MeetingsCreateInput
  ): Promise<Meetings> {
    return await this.service.createMeetings({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        dateTime: true,
        participants: true,
        title: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Meetings] })
  @ApiNestedQuery(MeetingsFindManyArgs)
  async meetingsItems(@common.Req() request: Request): Promise<Meetings[]> {
    const args = plainToClass(MeetingsFindManyArgs, request.query);
    return this.service.meetingsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        dateTime: true,
        participants: true,
        title: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Meetings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async meetings(
    @common.Param() params: MeetingsWhereUniqueInput
  ): Promise<Meetings | null> {
    const result = await this.service.meetings({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        dateTime: true,
        participants: true,
        title: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Meetings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMeetings(
    @common.Param() params: MeetingsWhereUniqueInput,
    @common.Body() data: MeetingsUpdateInput
  ): Promise<Meetings | null> {
    try {
      return await this.service.updateMeetings({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          dateTime: true,
          participants: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Meetings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMeetings(
    @common.Param() params: MeetingsWhereUniqueInput
  ): Promise<Meetings | null> {
    try {
      return await this.service.deleteMeetings({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          dateTime: true,
          participants: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
