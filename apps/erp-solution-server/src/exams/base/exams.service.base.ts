/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Exams as PrismaExams,
  Courses as PrismaCourses,
} from "@prisma/client";

export class ExamsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ExamsCountArgs, "select">): Promise<number> {
    return this.prisma.exams.count(args);
  }

  async examsItems(args: Prisma.ExamsFindManyArgs): Promise<PrismaExams[]> {
    return this.prisma.exams.findMany(args);
  }
  async exams(args: Prisma.ExamsFindUniqueArgs): Promise<PrismaExams | null> {
    return this.prisma.exams.findUnique(args);
  }
  async createExams(args: Prisma.ExamsCreateArgs): Promise<PrismaExams> {
    return this.prisma.exams.create(args);
  }
  async updateExams(args: Prisma.ExamsUpdateArgs): Promise<PrismaExams> {
    return this.prisma.exams.update(args);
  }
  async deleteExams(args: Prisma.ExamsDeleteArgs): Promise<PrismaExams> {
    return this.prisma.exams.delete(args);
  }

  async getCourse(parentId: string): Promise<PrismaCourses | null> {
    return this.prisma.exams
      .findUnique({
        where: { id: parentId },
      })
      .course();
  }
}
