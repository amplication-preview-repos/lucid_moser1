/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExamsService } from "../exams.service";
import { ExamsCreateInput } from "./ExamsCreateInput";
import { Exams } from "./Exams";
import { ExamsFindManyArgs } from "./ExamsFindManyArgs";
import { ExamsWhereUniqueInput } from "./ExamsWhereUniqueInput";
import { ExamsUpdateInput } from "./ExamsUpdateInput";

export class ExamsControllerBase {
  constructor(protected readonly service: ExamsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Exams })
  async createExams(@common.Body() data: ExamsCreateInput): Promise<Exams> {
    return await this.service.createExams({
      data: {
        ...data,

        course: data.course
          ? {
              connect: data.course,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        date: true,
        title: true,

        course: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Exams] })
  @ApiNestedQuery(ExamsFindManyArgs)
  async examsItems(@common.Req() request: Request): Promise<Exams[]> {
    const args = plainToClass(ExamsFindManyArgs, request.query);
    return this.service.examsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        date: true,
        title: true,

        course: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Exams })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async exams(
    @common.Param() params: ExamsWhereUniqueInput
  ): Promise<Exams | null> {
    const result = await this.service.exams({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        date: true,
        title: true,

        course: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Exams })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExams(
    @common.Param() params: ExamsWhereUniqueInput,
    @common.Body() data: ExamsUpdateInput
  ): Promise<Exams | null> {
    try {
      return await this.service.updateExams({
        where: params,
        data: {
          ...data,

          course: data.course
            ? {
                connect: data.course,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          date: true,
          title: true,

          course: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Exams })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExams(
    @common.Param() params: ExamsWhereUniqueInput
  ): Promise<Exams | null> {
    try {
      return await this.service.deleteExams({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          date: true,
          title: true,

          course: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
