/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Exams } from "./Exams";
import { ExamsCountArgs } from "./ExamsCountArgs";
import { ExamsFindManyArgs } from "./ExamsFindManyArgs";
import { ExamsFindUniqueArgs } from "./ExamsFindUniqueArgs";
import { CreateExamsArgs } from "./CreateExamsArgs";
import { UpdateExamsArgs } from "./UpdateExamsArgs";
import { DeleteExamsArgs } from "./DeleteExamsArgs";
import { Courses } from "../../courses/base/Courses";
import { ExamsService } from "../exams.service";
@graphql.Resolver(() => Exams)
export class ExamsResolverBase {
  constructor(protected readonly service: ExamsService) {}

  async _examsItemsMeta(
    @graphql.Args() args: ExamsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Exams])
  async examsItems(@graphql.Args() args: ExamsFindManyArgs): Promise<Exams[]> {
    return this.service.examsItems(args);
  }

  @graphql.Query(() => Exams, { nullable: true })
  async exams(
    @graphql.Args() args: ExamsFindUniqueArgs
  ): Promise<Exams | null> {
    const result = await this.service.exams(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Exams)
  async createExams(@graphql.Args() args: CreateExamsArgs): Promise<Exams> {
    return await this.service.createExams({
      ...args,
      data: {
        ...args.data,

        course: args.data.course
          ? {
              connect: args.data.course,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Exams)
  async updateExams(
    @graphql.Args() args: UpdateExamsArgs
  ): Promise<Exams | null> {
    try {
      return await this.service.updateExams({
        ...args,
        data: {
          ...args.data,

          course: args.data.course
            ? {
                connect: args.data.course,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Exams)
  async deleteExams(
    @graphql.Args() args: DeleteExamsArgs
  ): Promise<Exams | null> {
    try {
      return await this.service.deleteExams(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Courses, {
    nullable: true,
    name: "course",
  })
  async getCourse(@graphql.Parent() parent: Exams): Promise<Courses | null> {
    const result = await this.service.getCourse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
