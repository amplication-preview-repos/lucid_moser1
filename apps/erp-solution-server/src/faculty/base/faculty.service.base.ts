/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Faculty as PrismaFaculty,
  Courses as PrismaCourses,
} from "@prisma/client";

export class FacultyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FacultyCountArgs, "select">): Promise<number> {
    return this.prisma.faculty.count(args);
  }

  async faculties(args: Prisma.FacultyFindManyArgs): Promise<PrismaFaculty[]> {
    return this.prisma.faculty.findMany(args);
  }
  async faculty(
    args: Prisma.FacultyFindUniqueArgs
  ): Promise<PrismaFaculty | null> {
    return this.prisma.faculty.findUnique(args);
  }
  async createFaculty(args: Prisma.FacultyCreateArgs): Promise<PrismaFaculty> {
    return this.prisma.faculty.create(args);
  }
  async updateFaculty(args: Prisma.FacultyUpdateArgs): Promise<PrismaFaculty> {
    return this.prisma.faculty.update(args);
  }
  async deleteFaculty(args: Prisma.FacultyDeleteArgs): Promise<PrismaFaculty> {
    return this.prisma.faculty.delete(args);
  }

  async findCoursesItems(
    parentId: string,
    args: Prisma.CoursesFindManyArgs
  ): Promise<PrismaCourses[]> {
    return this.prisma.faculty
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .coursesItems(args);
  }
}
