/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FacultyService } from "../faculty.service";
import { FacultyCreateInput } from "./FacultyCreateInput";
import { Faculty } from "./Faculty";
import { FacultyFindManyArgs } from "./FacultyFindManyArgs";
import { FacultyWhereUniqueInput } from "./FacultyWhereUniqueInput";
import { FacultyUpdateInput } from "./FacultyUpdateInput";
import { CoursesFindManyArgs } from "../../courses/base/CoursesFindManyArgs";
import { Courses } from "../../courses/base/Courses";
import { CoursesWhereUniqueInput } from "../../courses/base/CoursesWhereUniqueInput";

export class FacultyControllerBase {
  constructor(protected readonly service: FacultyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Faculty })
  async createFaculty(
    @common.Body() data: FacultyCreateInput
  ): Promise<Faculty> {
    return await this.service.createFaculty({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        email: true,
        phoneNumber: true,
        officeHours: true,
        department: true,
        role: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Faculty] })
  @ApiNestedQuery(FacultyFindManyArgs)
  async faculties(@common.Req() request: Request): Promise<Faculty[]> {
    const args = plainToClass(FacultyFindManyArgs, request.query);
    return this.service.faculties({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        email: true,
        phoneNumber: true,
        officeHours: true,
        department: true,
        role: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Faculty })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async faculty(
    @common.Param() params: FacultyWhereUniqueInput
  ): Promise<Faculty | null> {
    const result = await this.service.faculty({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        email: true,
        phoneNumber: true,
        officeHours: true,
        department: true,
        role: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Faculty })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFaculty(
    @common.Param() params: FacultyWhereUniqueInput,
    @common.Body() data: FacultyUpdateInput
  ): Promise<Faculty | null> {
    try {
      return await this.service.updateFaculty({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          email: true,
          phoneNumber: true,
          officeHours: true,
          department: true,
          role: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Faculty })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFaculty(
    @common.Param() params: FacultyWhereUniqueInput
  ): Promise<Faculty | null> {
    try {
      return await this.service.deleteFaculty({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          email: true,
          phoneNumber: true,
          officeHours: true,
          department: true,
          role: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/coursesItems")
  @ApiNestedQuery(CoursesFindManyArgs)
  async findCoursesItems(
    @common.Req() request: Request,
    @common.Param() params: FacultyWhereUniqueInput
  ): Promise<Courses[]> {
    const query = plainToClass(CoursesFindManyArgs, request.query);
    const results = await this.service.findCoursesItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        courseName: true,
        courseCode: true,
        description: true,
        credits: true,

        faculty: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/coursesItems")
  async connectCoursesItems(
    @common.Param() params: FacultyWhereUniqueInput,
    @common.Body() body: CoursesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      coursesItems: {
        connect: body,
      },
    };
    await this.service.updateFaculty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/coursesItems")
  async updateCoursesItems(
    @common.Param() params: FacultyWhereUniqueInput,
    @common.Body() body: CoursesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      coursesItems: {
        set: body,
      },
    };
    await this.service.updateFaculty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/coursesItems")
  async disconnectCoursesItems(
    @common.Param() params: FacultyWhereUniqueInput,
    @common.Body() body: CoursesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      coursesItems: {
        disconnect: body,
      },
    };
    await this.service.updateFaculty({
      where: params,
      data,
      select: { id: true },
    });
  }
}
