/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Faculty } from "./Faculty";
import { FacultyCountArgs } from "./FacultyCountArgs";
import { FacultyFindManyArgs } from "./FacultyFindManyArgs";
import { FacultyFindUniqueArgs } from "./FacultyFindUniqueArgs";
import { CreateFacultyArgs } from "./CreateFacultyArgs";
import { UpdateFacultyArgs } from "./UpdateFacultyArgs";
import { DeleteFacultyArgs } from "./DeleteFacultyArgs";
import { CoursesFindManyArgs } from "../../courses/base/CoursesFindManyArgs";
import { Courses } from "../../courses/base/Courses";
import { FacultyService } from "../faculty.service";
@graphql.Resolver(() => Faculty)
export class FacultyResolverBase {
  constructor(protected readonly service: FacultyService) {}

  async _facultiesMeta(
    @graphql.Args() args: FacultyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Faculty])
  async faculties(
    @graphql.Args() args: FacultyFindManyArgs
  ): Promise<Faculty[]> {
    return this.service.faculties(args);
  }

  @graphql.Query(() => Faculty, { nullable: true })
  async faculty(
    @graphql.Args() args: FacultyFindUniqueArgs
  ): Promise<Faculty | null> {
    const result = await this.service.faculty(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Faculty)
  async createFaculty(
    @graphql.Args() args: CreateFacultyArgs
  ): Promise<Faculty> {
    return await this.service.createFaculty({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Faculty)
  async updateFaculty(
    @graphql.Args() args: UpdateFacultyArgs
  ): Promise<Faculty | null> {
    try {
      return await this.service.updateFaculty({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Faculty)
  async deleteFaculty(
    @graphql.Args() args: DeleteFacultyArgs
  ): Promise<Faculty | null> {
    try {
      return await this.service.deleteFaculty(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Courses], { name: "coursesItems" })
  async findCoursesItems(
    @graphql.Parent() parent: Faculty,
    @graphql.Args() args: CoursesFindManyArgs
  ): Promise<Courses[]> {
    const results = await this.service.findCoursesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
