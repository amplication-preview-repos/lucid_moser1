/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FinancialInformation } from "./FinancialInformation";
import { FinancialInformationCountArgs } from "./FinancialInformationCountArgs";
import { FinancialInformationFindManyArgs } from "./FinancialInformationFindManyArgs";
import { FinancialInformationFindUniqueArgs } from "./FinancialInformationFindUniqueArgs";
import { CreateFinancialInformationArgs } from "./CreateFinancialInformationArgs";
import { UpdateFinancialInformationArgs } from "./UpdateFinancialInformationArgs";
import { DeleteFinancialInformationArgs } from "./DeleteFinancialInformationArgs";
import { FinancialInformationService } from "../financialInformation.service";
@graphql.Resolver(() => FinancialInformation)
export class FinancialInformationResolverBase {
  constructor(protected readonly service: FinancialInformationService) {}

  async _financialInformationsMeta(
    @graphql.Args() args: FinancialInformationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FinancialInformation])
  async financialInformations(
    @graphql.Args() args: FinancialInformationFindManyArgs
  ): Promise<FinancialInformation[]> {
    return this.service.financialInformations(args);
  }

  @graphql.Query(() => FinancialInformation, { nullable: true })
  async financialInformation(
    @graphql.Args() args: FinancialInformationFindUniqueArgs
  ): Promise<FinancialInformation | null> {
    const result = await this.service.financialInformation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FinancialInformation)
  async createFinancialInformation(
    @graphql.Args() args: CreateFinancialInformationArgs
  ): Promise<FinancialInformation> {
    return await this.service.createFinancialInformation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FinancialInformation)
  async updateFinancialInformation(
    @graphql.Args() args: UpdateFinancialInformationArgs
  ): Promise<FinancialInformation | null> {
    try {
      return await this.service.updateFinancialInformation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FinancialInformation)
  async deleteFinancialInformation(
    @graphql.Args() args: DeleteFinancialInformationArgs
  ): Promise<FinancialInformation | null> {
    try {
      return await this.service.deleteFinancialInformation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
