/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FinancialInformationService } from "../financialInformation.service";
import { FinancialInformationCreateInput } from "./FinancialInformationCreateInput";
import { FinancialInformation } from "./FinancialInformation";
import { FinancialInformationFindManyArgs } from "./FinancialInformationFindManyArgs";
import { FinancialInformationWhereUniqueInput } from "./FinancialInformationWhereUniqueInput";
import { FinancialInformationUpdateInput } from "./FinancialInformationUpdateInput";

export class FinancialInformationControllerBase {
  constructor(protected readonly service: FinancialInformationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FinancialInformation })
  async createFinancialInformation(
    @common.Body() data: FinancialInformationCreateInput
  ): Promise<FinancialInformation> {
    return await this.service.createFinancialInformation({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        hostelFee: true,
        paymentStatus: true,
        paymentDate: true,
        tuitionFee: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FinancialInformation] })
  @ApiNestedQuery(FinancialInformationFindManyArgs)
  async financialInformations(
    @common.Req() request: Request
  ): Promise<FinancialInformation[]> {
    const args = plainToClass(FinancialInformationFindManyArgs, request.query);
    return this.service.financialInformations({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        hostelFee: true,
        paymentStatus: true,
        paymentDate: true,
        tuitionFee: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FinancialInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async financialInformation(
    @common.Param() params: FinancialInformationWhereUniqueInput
  ): Promise<FinancialInformation | null> {
    const result = await this.service.financialInformation({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        hostelFee: true,
        paymentStatus: true,
        paymentDate: true,
        tuitionFee: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FinancialInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFinancialInformation(
    @common.Param() params: FinancialInformationWhereUniqueInput,
    @common.Body() data: FinancialInformationUpdateInput
  ): Promise<FinancialInformation | null> {
    try {
      return await this.service.updateFinancialInformation({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          hostelFee: true,
          paymentStatus: true,
          paymentDate: true,
          tuitionFee: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FinancialInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFinancialInformation(
    @common.Param() params: FinancialInformationWhereUniqueInput
  ): Promise<FinancialInformation | null> {
    try {
      return await this.service.deleteFinancialInformation({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          hostelFee: true,
          paymentStatus: true,
          paymentDate: true,
          tuitionFee: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
